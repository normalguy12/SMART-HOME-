'use strict';

// generated by: https://github.com/adafruit/io-swagger-templates
// using the Adafruit IO Swagger docs: https://io.adafruit.com/api/docs/api.json
const Controller = require('../../controller'),
      Data = require('../../models/Data');

exports = module.exports = Object.assign({}, Controller);

module.exports.all = function all(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value;

  Data.all(feedId)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.create = function create(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        data = req.swagger.params['data'].value;

  Data.create(feedId, data)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.last = function last(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value;

  Data.last(feedId)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.next = function next(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value;

  Data.next(feedId)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.previous = function previous(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value;

  Data.previous(feedId)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.receive = function receive(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value;

  Data.receive(feedId)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.send = function send(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        data = req.swagger.params['data'].value;

  Data.send(feedId, data)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.get = function get(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        id = req.swagger.params['id'].value;

  Data.get(feedId, id)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.replace = function replace(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        id = req.swagger.params['id'].value,
        data = req.swagger.params['data'].value;

  Data.replace(feedId, id, data)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.destroy = function destroy(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        id = req.swagger.params['id'].value;

  Data.destroy(feedId, id)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

module.exports.update = function update(req, res, next) {

  const feedId = req.swagger.params['feed_id'].value,
        id = req.swagger.params['id'].value,
        data = req.swagger.params['data'].value;

  Data.update(feedId, id, data)
    .then(exports.handleResponse.bind(this, res))
    .catch(exports.handleError.bind(this, res));

};

